#!/bin/bash

help() {
    local bold='\e[1m'
    local reset='\e[0m'

    declare -a toggle_array
    read -ra toggle_array < <(print-toggle-list)
    declare -a container_array
    read -ra container_array < <(print-container-list)

    cat <<EOF
${bold@P}Usage:${reset@P}
    ${bold@P}ct${reset@P} [toggle|option] [...] container [container_command_line]

${bold@P}Options:${reset@P}
    ${bold@P}-d${reset@P}, ${bold@P}--dry-run${reset@P}          Only print the final command
    ${bold@P}-h${reset@P}, ${bold@P}--help${reset@P}             Show help
    ${bold@P}-l${reset@P}, ${bold@P}--long-help${reset@P}        Show long help
    ${bold@P}-r${reset@P}, ${bold@P}--rootful${reset@P}          Run rootful container

${bold@P}Toggles (Autogenerated):${reset@P}
$(printf '    %s\n' "${toggle_array[@]}" | column --columns "$COLUMNS" | expand)

${bold@P}Containers (Autogenerated):${reset@P}
$(printf '    %s\n' "${container_array[@]}" | column --columns "$COLUMNS" | expand)
EOF
}

long-help() {
    local bold='\e[1m'
    local reset='\e[0m'
    declare -a toggle_array
    declare -a container_array

    read -ra toggle_array < <(print-toggle-list)
    read -ra container_array < <(print-container-list)

    less --RAW-CONTROL-CHARS <<EOF
${bold@P}NAME${reset@P}
    ct - Easy toggling of common podman arguments

${bold@P}SYNOPSIS${reset@P}
    ${bold@P}ct${reset@P} [toggle|option] [...] container [container_command_line]

${bold@P}DESCRIPTION${reset@P}
    'ct' stands for container toggles. It's a bash script wrapper on the podman
    command line. It enables easy toggling of common podman arguments. It does
    so by accumulating arguments in 2 arrays, then combines them with the
    default ones and finally inserts them in the final command and executes it.
    
    ${bold@P}Good to know:${reset@P}
    - Don't export environement variables globally, otherwise all subsequent
      runs will use them. They are meant to be discarded after a single use.
    - Containers can be run directly i.e. without invoking 'ct' first.
    - Tab completion is autogenerated with sections.
    - When all toggles are comsumed from the command it will execute the left
      over arguments.
    - A toggle will be passed over if it is already toggled.
    - 'ct' does not parse text within the variables, so duplicates are possible.
    - Toggles have dependency and conflict management.
    - All toggles and containers are automatically loaded from the functions if
      put in their appropriate directory. The file names don't matter.
      ('~/bashrc.d/ct/toggles' and '~/bashrc.d/ct/containers' respectively)
    - Toggle functions must have 't-' as a prefix to be recognized.
    - Source the bashrc after making modifications:
        $ . ~/.bashrc
    - 'ct-debug'  can be helpful to debug a new toggle.
    - 'ct' could be easily repurposed for another command by adding a command
      script in the '~/.bashrc.d/ct/command' directory.

${bold@P}OPTIONS${reset@P}
    ${bold@P}-d${reset@P}, ${bold@P}--dry-run${reset@P}
        Only print the final command

    ${bold@P}-h${reset@P}, ${bold@P}--help${reset@P}
        Show help

    ${bold@P}-l${reset@P}, ${bold@P}--long-help${reset@P}
        Show long help

    ${bold@P}-r${reset@P}, ${bold@P}--rooct_arraytful${reset@P}
        Run rootful container

${bold@P}TOGGLES (Autogenerated)${reset@P}
$(printf '    %s\n' "${toggle_array[@]}" | column --columns "$COLUMNS" | expand)

${bold@P}CONTAINERS (Autogenerated)${reset@P}
$(printf '    %s\n' "${container_array[@]}" | column --columns "$COLUMNS" | expand)

${bold@P}EXAMPLES${reset@P}
    # 4 ways to start 'container' with 'rm' and 'tty' toggled on.
        $ ct rm tty container
        $ EXTRA_ARGS="--rm --interactive --tty" container
    # Modifying '~/.bashrc.d/ct/containers/container' directly and executing:
        $ container
    # Executing the command script directly with 'ct'
        $ EXTRA_ARGS="--rm --interactive --tty" \\
          IMAGE="registry/namespace/repo:tag" \\
          ct podman-run

    # This toggles 'rm' once, twice if container has the '--rm' argument.
        $ ct rm rm rm container

    # These are equivalent (dependency management)
        $ ct runtime-crun group-add-keep-groups gpu gui container
        $ ct gui container
    
    # This will generate an error (conflict management)
        $ ct network-host network-none container

    # Run rootful container
        $ ct --rootful rm tty container

    # 'ct' can be fed back into itself.
        $ ct rm ct tty container

    # 'ct-debug' will dump all relevant variables at the toggle stage.
        $ ct rm tty ct-debug

${bold@P}ENVIRONMENT${reset@P}
    ${bold@P}GLOBAL_EXTRA_ARGS${reset@P}
        Arguments appended to the podman base command.
            $ podman GLOBAL_EXTRA_ARGS run
        Arguments are delimited by a space character.
    ${bold@P}EXTRA_ARGS${reset@P}
        Arguments appended to the podman command.
            $ podman run EXTRA_ARGS
        Arguments are delimited by a space character.
    ${bold@P}ROOTFUL${reset@P}
        If it is set to any values, even empty, then the podman command will be
        run with sudo.
    ${bold@P}DRY_RUN${reset@P}
        If it is set to any values, even empty, 'ct' will only print the final
        command. The resulting command can be reused as a shell input.
    ${bold@P}IMAGE${reset@P}
        Container image in the following format.
        "registry/namespace/repo:tag"
EOF
}